@page
@model TravelPlanner.WebUI.Pages.MyTripsModel
@{
    ViewData["Title"] = "My Trips";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>My Trips</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <style>
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      color: white;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .overlay {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    .sidebar {
      width: 280px;
      background-color: rgba(255, 255, 255, 0.08);
      backdrop-filter: blur(20px);
      height: 100vh;
      position: fixed;
      padding: 2rem 1rem 1.5rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-shadow: 3px 0 15px rgba(0,0,0,0.3);
      border-radius: 0 16px 16px 0;
      z-index: 1;
    }

    .profile-box {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 2rem;
    }

    .avatar {
      width: 100px;
      height: 100px;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      font-size: 2.7rem;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1rem;
    }

    #name {
      font-size: 1.3rem;
      font-weight: 700;
      margin: 0;
    }

    #username {
      font-size: 0.9rem;
      color: #dddddd;
      margin: 0.4rem 0 1.2rem;
    }

    .settings {
      margin-top: auto;
      width: 100%;
    }

    .settings-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-left: -1rem;
      margin-bottom: 1rem;
      width: 100%;
      padding: 1rem 1rem;
      font-size: 1rem;
      font-weight: 500;
      color: #ffffff;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .settings-toggle:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .settings-toggle::before {
      content: '\2699';
      margin-right: 0.6rem;
      font-size: 1.2rem;
    }

    .settings-list {
      display: none;
      flex-direction: column;
      background-color: rgba(255, 255, 255, 0.2);
      color: #333;
      border-radius: 8px;
      margin: 0.8rem 0;
      list-style-type: none;
      padding: 0;
    }

    .settings-list.active {
      display: flex;
    }

    .settings-list li {
      padding: 0.8rem 1.2rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.2s;
      color: white;
    }

    .settings-list li:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    .main {
      margin-left: 300px;
      padding: 3rem 2rem;
      position: relative;
      z-index: 1;
    }

    .content-wrapper {
      max-width: 700px;
      width: 100%;
    }

    h3 {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
    }

    .trip {
      background-color: rgba(255, 255, 255, 0.12);
      backdrop-filter: blur(20px);
      border-radius: 16px;
      padding: 1.5rem 2rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .trip-title {
      font-size: 1.4rem;
      font-weight: 600;
    }

    .trip-details {
      margin: 0.5rem 0 1rem;
    }

    .trip-actions button {
      margin-right: 1rem;
      padding: 0.5rem 1.2rem;
      border: none;
      border-radius: 8px;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .edit-btn { background-color: #4fc3f7; color: white; }
    .edit-btn:hover { background-color: #039be5; }

    .delete-btn { background-color: #ef5350; color: white; }
    .delete-btn:hover { background-color: #d32f2f; }

    .view-btn { background-color: #81c784; color: white; }
    .view-btn:hover { background-color: #388e3c; }

    .no-trips {
      text-align: center;
      font-size: 1.2rem;
      color: #ccc;
      margin-top: 3rem;
    }

    .loading {
      text-align: center;
      font-size: 1.2rem;
      margin-top: 3rem;
    }
  </style>
</head>
<body>
  <div class="overlay"></div>

  <div class="sidebar">
    <div class="profile-box">
      <div class="avatar" id="initial">U</div>
      <h2 id="name">User Name</h2>
    </div>

    <div class="settings">
      <div class="settings-toggle" onclick="toggleSettings()">Settings</div>
      <ul id="settingsMenu" class="settings-list">
        <li onclick="goToProfile()">Back to Profile</li>
        <li onclick="logout()">Log out</li>
      </ul>
    </div>
  </div>

  <div class="main">
    <div class="content-wrapper">
      <h3>My Trips</h3>
      <div id="loading" class="loading">Loading your trips...</div>
      <div id="tripsContainer"></div>
      <div id="noTrips" class="no-trips" style="display: none;">
        You haven't created any trips yet. <br />
        <a href="../Homepage" style="color: #4fc3f7;">Create your first trip!</a>
      </div>
    </div>
  </div>

  <script>
    const fname = localStorage.getItem("user_firstName") || "User";
    const lname = localStorage.getItem("user_lastName") || "Name";
    document.getElementById("name").textContent = `${fname} ${lname}`;
    document.getElementById("initial").textContent = fname.charAt(0).toUpperCase();


    const images = Array.from({ length: 30 }, (_, i) => `../media/bg${i + 1}.jpg`);
    const randomImage = images[Math.floor(Math.random() * images.length)];
    const preloadImage = new Image();
    preloadImage.src = randomImage;
    preloadImage.onload = () => {
      document.body.style.backgroundImage = `url('${randomImage}')`;
    };

    async function loadTripsFromAPI() {
      const userId = localStorage.getItem("user_id");
      if (!userId) return;

      try {
        const response = await fetch(`http://localhost:5192/api/trip/user/${userId}`);
        const trips = await response.json();

        const container = document.getElementById("tripsContainer");
        const loading = document.getElementById("loading");
        const noTrips = document.getElementById("noTrips");

        if (loading) loading.style.display = "none";

        if (trips.length === 0) {
          noTrips.style.display = "block";
        } else {
          trips.forEach(trip => {
            const element = createTripElement(trip);
            container.appendChild(element);
          });
        }
      } catch (error) {
        console.error("Failed to load trips:", error);
      }
    }

    function createTripElement(trip) {
      const div = document.createElement("div");
      div.className = "trip";
      div.id = `trip-${trip.id}`;

      let start = trip.startDate ? new Date(trip.startDate).toLocaleDateString() : "N/A";
      let end = trip.endDate ? new Date(trip.endDate).toLocaleDateString() : "N/A";

      div.innerHTML = `
        <div class="trip-title">${trip.title || 'Untitled Trip'}</div>
        <p class="trip-details">${trip.destination} â€“ ${start} to ${end}</p>
        <div class="trip-actions">

         
        </div>`;
      return div;
    }

    function editTrip(id) { alert(`Edit trip ${id}`); }
    function deleteTrip(id) { alert(`Delete trip ${id}`); }
    function viewTrip(id) { alert(`View trip ${id}`); }

    function toggleSettings() {
      document.getElementById("settingsMenu").classList.toggle("active");
    }

    function logout() {
      localStorage.clear();
      window.location.href = '../Index';
    }

    function goToProfile() {
      window.location.href = '../Account/Account';
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadTripsFromAPI);
    } else {
      loadTripsFromAPI();
    }
  </script>
</body>
</html>
