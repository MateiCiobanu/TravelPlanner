@page
@model TravelPlanner.WebUI.Pages.MyTripsModel
@{
    ViewData["Title"] = "My Trips";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>My Trips</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <style>
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)),
                  url("media/city11.jpeg") no-repeat center center fixed;
      background-size: cover;
      color: white;
    }

    .sidebar {
      width: 280px;
      background-color: rgba(255, 255, 255, 0.08);
      backdrop-filter: blur(20px);
      height: 100vh;
      position: fixed;
      padding: 2rem 1rem 1.5rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-shadow: 3px 0 15px rgba(0,0,0,0.3);
      border-radius: 0 16px 16px 0;
    }

    .profile-box {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 2rem;
    }

    .avatar {
      width: 100px;
      height: 100px;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      font-size: 2.7rem;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1rem;
    }

    #name {
      font-size: 1.3rem;
      font-weight: 700;
      margin: 0;
    }

    #username {
      font-size: 0.9rem;
      color: #dddddd;
      margin: 0.4rem 0 1.2rem;
    }

    .settings {
      margin-top: auto;
      width: 100%;
      position: relative;
    }

    .settings-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-left: -1rem;
      margin-bottom: 1rem;
      width: 100%;
      padding: 1rem 1rem;
      font-size: 1rem;
      font-weight: 500;
      color: #ffffff;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .settings-toggle:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .settings-toggle::before {
      content: '\2699';
      margin-right: 0.6rem;
      font-size: 1.2rem;
    }

    .settings-list {
      display: none;
      flex-direction: column;
      background-color: rgba(255, 255, 255, 0.2);
      color: #333;
      border-radius: 8px;
      margin: 0.8rem 0;
      overflow: hidden;
      list-style-type: none;
    }

    .settings-list.active {
      display: flex;
    }

    .settings-list li {
      padding: 0.8rem 1.2rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.2s;
    }

    .settings-list li:hover {
      background-color: #f1f1f1;
    }

    .main {
      margin-left: 300px;
      padding: 3rem 2rem;
    }

    h3 {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
    }

    .trip {
      background-color: rgba(255, 255, 255, 0.12);
      backdrop-filter: blur(20px);
      border-radius: 16px;
      padding: 1.5rem 2rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      position: relative;
    }

    .trip-title {
      font-size: 1.4rem;
      font-weight: 600;
    }

    .trip-details {
      margin: 0.5rem 0 1rem;
    }

    .trip-actions button {
      margin-right: 1rem;
      padding: 0.5rem 1.2rem;
      border: none;
      border-radius: 8px;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .edit-btn {
      background-color: #4fc3f7;
      color: white;
    }

    .edit-btn:hover {
      background-color: #039be5;
    }

    .delete-btn {
      background-color: #ef5350;
      color: white;
    }

    .delete-btn:hover {
      background-color: #d32f2f;
    }

    .view-btn {
      background-color: #81c784;
      color: white;
    }

    .view-btn:hover {
      background-color: #388e3c;
    }

    .no-trips {
      text-align: center;
      font-size: 1.2rem;
      color: #ccc;
      margin-top: 3rem;
    }

    .loading {
      text-align: center;
      font-size: 1.2rem;
      margin-top: 3rem;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <div class="profile-box">
      <div class="avatar" id="initial">N</div>
      <h2 id="name">Name Surname</h2>
      <p id="username">user</p>
    </div>

    <div class="settings">
      <div class="settings-toggle" onclick="toggleSettings()">Settings</div>
      <ul id="settingsMenu" class="settings-list">
        <li onclick="goToProfile()">Back to Profile</li>
        <li onclick="logout()">Log out</li>
      </ul>
    </div>
  </div>

  <div class="main">
    <h3>My Trips</h3>
    
    <div id="loading" class="loading">Loading your trips...</div>
    <div id="tripsContainer"></div>
    <div id="noTrips" class="no-trips" style="display: none;">
      You haven't created any trips yet. <br>
      <a href="../Homepage" style="color: #4fc3f7;">Create your first trip!</a>
    </div>
  </div>

  <script>
    console.log("MyTrips page loaded");
    
    // Load user info
    const fname = localStorage.getItem("user_firstName") || "Name";
    const lname = localStorage.getItem("user_lastName") || "Surname";
    document.getElementById("name").textContent = `${fname} ${lname}`;
    document.getElementById("initial").textContent = fname.charAt(0).toUpperCase();
      document.getElementById("usernameText").textContent = fname.toLowerCase();

    function loadTrips() {
      console.log("loadTrips function called");
      
      try {
        const loading = document.getElementById("loading");
        const container = document.getElementById("tripsContainer");
        const noTrips = document.getElementById("noTrips");

        console.log("Elements found:", {loading, container, noTrips});
        
        // localStorage'dan trip'leri oku
        const savedTripsStr = localStorage.getItem('savedTrips');
        console.log("Raw savedTrips from localStorage:", savedTripsStr);
        
        const savedTrips = JSON.parse(savedTripsStr || '[]');
        console.log("Parsed savedTrips:", savedTrips);
        
        // Loading'i gizle
        if (loading) {
          loading.style.display = "none";
          console.log("Loading hidden");
        }
        
        if (savedTrips.length === 0) {
          console.log("No trips found, showing no-trips message");
          if (noTrips) {
            noTrips.style.display = "block";
          }
        } else {
          console.log(`Displaying ${savedTrips.length} trips`);
          savedTrips.forEach((trip, index) => {
            console.log(`Creating trip element ${index}:`, trip);
            const tripElement = createTripElement(trip);
            if (container) {
              container.appendChild(tripElement);
            }
          });
          
          if (noTrips) {
            noTrips.style.display = "none";
          }
        }

      } catch (error) {
        console.error("Error in loadTrips:", error);
        const loading = document.getElementById("loading");
        if (loading) {
          loading.textContent = "Error loading trips: " + error.message;
        }
      }
    }

    function createTripElement(trip) {
      const div = document.createElement("div");
      div.className = "trip";
      div.id = `trip-${trip.id}`;
      
      // Tarih formatını güvenli hale getir
      let startDate = "N/A";
      let endDate = "N/A";
      
      try {
        if (trip.startDate) {
          startDate = new Date(trip.startDate).toLocaleDateString();
        }
        if (trip.endDate) {
          endDate = new Date(trip.endDate).toLocaleDateString();
        }
      } catch (dateError) {
        console.warn("Date parsing error:", dateError);
      }
      
      div.innerHTML = `
        <div class="trip-title">${trip.title || 'Untitled Trip'}</div>
        <p class="trip-details">${trip.destination || 'Unknown Destination'} – ${startDate} to ${endDate}</p>
        <div class="trip-actions">
          <button class="edit-btn" onclick="editTrip(${trip.id})">Edit</button>
          <button class="delete-btn" onclick="deleteTrip(${trip.id})">Delete</button>
          <button class="view-btn" onclick="viewTrip(${trip.id})">View</button>
        </div>
      `;
      
      return div;
    }

    function deleteTrip(id) {
      const confirmDelete = confirm("Are you sure you want to delete this trip?");
      if (confirmDelete) {
        try {
          // localStorage'dan sil
          let savedTrips = JSON.parse(localStorage.getItem('savedTrips') || '[]');
          savedTrips = savedTrips.filter(trip => trip.id != id);
          localStorage.setItem('savedTrips', JSON.stringify(savedTrips));
          
          // UI'dan kaldır
          const tripElement = document.getElementById(`trip-${id}`);
          if (tripElement) {
            tripElement.remove();
          }
          
          alert("Trip deleted successfully.");
          
          // Eğer hiç trip kalmadıysa no-trips mesajını göster
          if (savedTrips.length === 0) {
            document.getElementById("noTrips").style.display = "block";
          }
          
        } catch (error) {
          console.error("Error deleting trip:", error);
          alert("Error deleting trip.");
        }
      }
    }

    function editTrip(id) {
      alert(`Edit functionality for trip ${id} - Not implemented yet`);
    }

    function viewTrip(id) {
      // Trip detaylarını göster
      const savedTrips = JSON.parse(localStorage.getItem('savedTrips') || '[]');
      const trip = savedTrips.find(t => t.id == id);
      
      if (trip) {
        let details = `Trip: ${trip.title}\nDestination: ${trip.destination}\nDates: ${trip.startDate} to ${trip.endDate}\n\nItinerary:\n`;
        
        if (trip.itineraryItems && trip.itineraryItems.length > 0) {
          trip.itineraryItems.forEach(item => {
            details += `Day ${item.dayNumber}: ${item.placeName} (${item.startTime} - ${item.endTime})\n`;
          });
        } else {
          details += "No specific itinerary items saved.";
        }
        
        alert(details);
      }
    }

    function toggleSettings() {
      document.getElementById("settingsMenu").classList.toggle("active");
    }

    function logout() {
      localStorage.clear();
      window.location.href = '../Index';
    }

    function goToProfile() {
      window.location.href = '../Account/Account';
    }

    // Test localStorage
    console.log("Current localStorage savedTrips:", localStorage.getItem('savedTrips'));
    
    // DOM yüklendikten sonra loadTrips çağır
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM loaded, calling loadTrips");
        loadTrips();
      });
    } else {
      console.log("DOM already loaded, calling loadTrips immediately");
      loadTrips();
    }
  </script>
</body>
</html>