@page
@model TravelPlanner.WebUI.Pages.IndexModel
@{
    ViewData["Title"] = "Login Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      height: 100vh;
      font-family: 'Poppins', sans-serif;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f9f9f9;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      color: white;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
      position: relative;
    }

    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      height: 100vh;
      width: 100vw;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    .login-container {
      position: relative;
      z-index: 1;
      background-color: transparent;
      padding: 3rem 4rem;
      border-radius: 12px;
      max-width: 400px;
      width: 100%;
    }

    h1 {
      font-size: 3rem;
      margin-bottom: 2rem;
      text-align: center;
    }

    input {
      width: 100%;
      padding: 0.8rem 1rem;
      margin-bottom: 1.5rem;
      border: none;
      border-radius: 6px;
      background-color: rgba(255, 255, 255, 0.15);
      color: white;
      font-size: 1rem;
      backdrop-filter: blur(4px);
    }

    input::placeholder {
      color: rgba(255, 255, 255, 0.7);
    }

    button {
      width: 100%;
      padding: 0.8rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      border: none;
      border-radius: 6px;
      background-color: rgba(255, 255, 255, 0.2);
      color: white;
      backdrop-filter: blur(4px);
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: rgba(255, 255, 255, 0.35);
    }

    .register-text {
      margin-top: 1.5rem;
      text-align: center;
      font-size: 0.9rem;
      font-weight: 300;
    }

    .register-text a {
      color: white;
      text-decoration: underline;
      font-weight: 500;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="overlay"></div>
  <div class="login-container">
    <h1>Login</h1>
    <form id="loginForm">
      <input type="email" placeholder="Email" id="email" required />
      <input type="password" placeholder="Password" id="password" required />
      <button id="loginBtn" type="submit">Login</button>
    </form>

    <p id="loginMessage" style="text-align:center; margin-top:1rem;"></p>
    <p class="register-text">Donâ€™t have an account? <a href="../Register">Register now!</a></p>
  </div>

  <script>

    const images = [
      '/media/bg1.jpg', '/media/bg2.jpg', '/media/bg3.jpg', '/media/bg4.jpg',
      '/media/bg5.jpg', '/media/bg6.jpg', '/media/bg7.jpg', '/media/bg8.jpg',
      '/media/bg9.jpg', '/media/bg10.jpg', '/media/bg11.jpg', '/media/bg12.jpg',
      '/media/bg13.jpg', '/media/bg14.jpg', '/media/bg15.jpg', '/media/bg16.jpg',
      '/media/bg17.jpg', '/media/bg18.jpg', '/media/bg19.jpg', '/media/bg20.jpg',
      '/media/bg21.jpg', '/media/bg22.jpg', '/media/bg23.jpg', '/media/bg24.jpg',
      '/media/bg25.jpg', '/media/bg26.jpg', '/media/bg27.jpg', '/media/bg28.jpg',
      '/media/bg29.jpg', '/media/bg30.jpg'
    ];
    const randomImage = images[Math.floor(Math.random() * images.length)];
    const preloadImage = new Image();
      preloadImage.src = randomImage;
        preloadImage.onload = () => {
    document.body.style.backgroundImage = `url('${randomImage}')`;
   };
   
    window.addEventListener('popstate', function () {
    window.location.href = 'index.html';
   });
  document.getElementById("loginForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const email = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value;
  const message = document.getElementById("loginMessage");

  try {
    const response = await fetch("http://localhost:5192/api/user/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password })
    });

    if (response.ok) {
      const token = await response.text();
      localStorage.setItem("jwt_token", token); 
      localStorage.setItem("user_email", email);
      window.location.href = "/Homepage"; 
    } else {
      const error = await response.text();
      message.textContent = `Login failed: ${error}`;
      message.style.color = "white";
    }
  } catch (err) {
    message.textContent = "Something went wrong. Try again later.";
    message.style.color = "white";
  }
});
 window.onload = function () {
    localStorage.removeItem("user_email");
  localStorage.removeItem("jwt_token");
  localStorage.removeItem("user_firstName");
  localStorage.removeItem("user_lastName");
  localStorage.removeItem("user_type");

  localStorage.removeItem("user_gender");
  localStorage.removeItem("user_age");
  localStorage.removeItem("user_password");
  
   const firstName = localStorage.getItem("user_firstName");
    const lastName = localStorage.getItem("user_lastName");
    const email = localStorage.getItem("user_email");
    const travelerType = localStorage.getItem("traveler_type");

    console.log("First Name:", firstName);
    console.log("Last Name:", lastName);
    console.log("Email:", email);
    console.log("Traveler Type:", travelerType);

  };
  </script>
</body>
</html>
