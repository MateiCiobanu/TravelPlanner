@page
@model TravelPlanner.WebUI.Pages.ItineraryModel
@{
    ViewData["Title"] = "Itinerary Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Travel Planner – Itinerary</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html, body {
      height: 100%;
      font-family: 'Poppins', sans-serif;
    }

    body {
      display: flex;
      flex-direction: column;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      color: white;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
      position: relative;
    }

    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    main {
      padding: 2rem;
      z-index: 5;
      position: relative;
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      position: relative;
      z-index: 6;
    }

    .logo {
      font-size: 3rem;
      font-weight: 700;
    }

    .user-icon, .camera-icon {
      width: 40px;
      height: 40px;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .user-icon:hover, .camera-icon:hover {
      transform: scale(1.1);
    }

    .itinerary-layout {
      display: flex;
      flex-grow: 1;
      position: relative;
      z-index: 5;
      padding: 2rem;
      gap: 2rem;
    }

    .day-selector {
      background-color: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(4px);
      border-radius: 12px;
      padding: 1rem;
      width: 250px;
    }

    .day-button {
      display: block;
      width: 100%;
      background-color: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      font-size: 1rem;
      margin-bottom: 0.5rem;
      padding: 0.8rem;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .day-button:hover,
    .day-button.active {
      background-color: rgba(255, 255, 255, 0.35);
    }

    .activities {
      margin-top: 1rem;
    }

    .activity {
      background-color: white;
      color: #333;
      padding: 0.8rem;
      border-radius: 10px;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
      text-shadow: none;
    }

    .map-container {
      flex-grow: 1;
      background-color: white;
      border-radius: 12px;
      overflow: hidden;
    }

    iframe.map {
      width: 100%;
      height: 100%;
      border: none;
      border-radius: 12px;
    }
  .itinerary-layout {
      display: flex;
      flex-grow: 1;
      position: relative;
      z-index: 5;
      padding: 2rem;
      gap: 2rem;
    }

    .day-viewer {
      background-color: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(4px);
      border-radius: 12px;
      padding: 1rem;
      width: 300px;
      text-align: center;
    }

    .day-label {
      font-size: 1.4rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .activities {
      margin-top: 1rem;
    }

    .activity {
      background-color: white;
      color: #333;
      padding: 0.8rem;
      border-radius: 10px;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
      text-shadow: none;
    }

    .arrow-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 1rem;
    }

    .arrow-button {
      font-size: 2rem;
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .arrow-button:hover {
      transform: scale(1.2);
    }

    .map-container {
      flex-grow: 1;
      background-color: white;
      border-radius: 12px;
      overflow: hidden;
    }

    iframe.map {
      width: 100%;
      height: 100%;
      border: none;
      border-radius: 12px;
    }
    .save-itinerary-button {
      margin-top: 1rem;
      background-color: #2482c8;
      color: white;
      border: none;
      padding: 0.8rem 1.2rem;
      font-size: 1rem;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .save-itinerary-button:hover {
       background-color: #1d6fab;
    }

  </style>
</head>
<body>
  <div class="overlay"></div>

  <main>
    <header>
      <div class="logo">Travel Planner</div>
      <div style="display: flex; align-items: center; gap: 1rem;">
        <a href="../TravelWall"><img src="media/camera-icon.png" alt="Camera Icon" class="camera-icon"></a>
      <a href="../Account/Account"><img src="media/user-icon.png" alt="User Account" class="user-icon"></a>
      </div>
    </header>

    <div class="itinerary-layout">
      <div class="day-viewer">
        <div class="day-label" id="dayLabel">Day 1</div>
        <div class="activities" id="activities">
        </div>
        <div class="arrow-buttons">
          <button class="arrow-button" onclick="navigateDay(-1)">&lsaquo;</button>
          <button class="arrow-button" onclick="navigateDay(1)">&rsaquo;</button>
        </div>
        <button class="save-itinerary-button" onclick="saveItinerary()">Save Itinerary</button>
      </div>

      <div class="map-container">
        <iframe class="map" id="dynamicMap" allowfullscreen="" loading="lazy"></iframe>
      </div>
    </div>
  </main>

  <script>
    const images = Array.from({ length: 30 }, (_, i) => `media/bg${i + 1}.jpg`);
  const randomImage = images[Math.floor(Math.random() * images.length)];
  const preloadImage = new Image();
  preloadImage.src = randomImage;
  preloadImage.onload = () => {
    document.body.style.backgroundImage = `url('${randomImage}')`;
  };

  let currentDay = 1;
  const itineraryData = JSON.parse(sessionStorage.getItem("itineraryData"));
  const totalDays = itineraryData.dailySuggestions.length;

  const activitiesByDay = {};
  itineraryData.dailySuggestions.forEach(day => {
  activitiesByDay[day.dayNumber] = day.places.map(p => ({
    googlePlaceId: p.googlePlaceId, 
    name: p.name,
    schedule: p.schedule,
    todayHours: p.todayHours,
    allHours: p.openingHours,
    latitude: p.latitude,
    longitude: p.longitude,
    phoneIntl: p.internationalPhoneNumber || "",  // ✅ this must match DTO key
    phoneNational: p.formattedPhoneNumber || "",  // ✅ this too
    website: p.website || "",
    category: p.category || "",
    externalInfoLink: p.externalInfoLink || ""
  }));
});

  const getUsedPlaceIds = () =>
  new Set(Object.values(activitiesByDay)
      .flatMap(day => day)
      .filter(p => p && p.googlePlaceId)
      .map(p => p.googlePlaceId));

  const activityInfo = {
  "Visit Colosseum": {
    hours: "08:30 – 19:00",
    website: "https://parcocolosseo.it/en/",
    wikipedia: "https://en.wikipedia.org/wiki/Colosseum",
    phoneIntl: "+39 06 3996 7700",
    phoneNational: "06 3996 7700",
    rating: "4.7 / 5"
  },
  "Lunch near Trevi Fountain": {
    hours: "12:00 – 15:00",
    website: "https://www.trevifountain.net/",
    wikipedia: "https://en.wikipedia.org/wiki/Trevi_Fountain",
    phoneIntl: "+39 06 1234 5678",
    phoneNational: "06 1234 5678",
    rating: "4.3 / 5"
  },
};

function renderDay() {
  const dayLabel = document.getElementById("dayLabel");
  const activitiesContainer = document.getElementById("activities");

  dayLabel.textContent = `Day ${currentDay}`;
  activitiesContainer.innerHTML = "";

  const dayActivities = activitiesByDay[currentDay] || [];

  dayActivities.forEach((activity, index) => {
    const wrapper = document.createElement("div");
    wrapper.className = "activity";
    wrapper.style.display = "flex";
    wrapper.style.justifyContent = "center";
    wrapper.style.alignItems = "center";
    wrapper.style.height = "50px";

    if (!activity) {
      const addBtn = createAddButton(() => {
        const newActivity = prompt("Enter new activity:");
        if (newActivity) {
          dayActivities[index] = newActivity;
          renderDay();
        }
      });
      wrapper.appendChild(addBtn);
    } 
    else {
      const span = createActivitySpan(activity);
      const deleteBtn = createDeleteButton(() => {
        const deletedActivity = dayActivities[index];
        const categoryToRefill = deletedActivity.category;
        const timeSlot = deletedActivity.schedule;

        const usedIds = getUsedPlaceIds();
        
        // Flatten all days and extract ALL activities from the full itinerary data
        const allAvailable = itineraryData.dailySuggestions.flatMap(day => day.places);

        // Filter by category and time slot, and exclude already used IDs
        const pool = allAvailable.filter(p =>
          p.category === categoryToRefill &&
          !usedIds.has(p.googlePlaceId)
        );

        if (pool.length === 0) {
        const fallback = allAvailable.filter(p => !usedIds.has(p.googlePlaceId));
        if (fallback.length > 0) {
          const random = fallback[Math.floor(Math.random() * fallback.length)];
          random.schedule = timeSlot;
          dayActivities[index] = random;
        } else {
          dayActivities[index] = {
            name: "No more suggestions",
            schedule: timeSlot,
            todayHours: "",
            website: "",
            externalInfoLink: "",
            category: categoryToRefill,
            latitude: 0,
            longitude: 0,
            googlePlaceId: `empty-${Date.now()}`
          };
        }
      }

        if (pool.length > 0) {
          const newActivity = pool[Math.floor(Math.random() * pool.length)];
          newActivity.schedule = timeSlot;
          dayActivities[index] = newActivity;
        } else {
          // fallback to let user add something manually
          dayActivities[index] = {
            name: "No more suggestions",
            schedule: timeSlot,
            todayHours: "",
            website: "",
            externalInfoLink: "",
            category: categoryToRefill,
            latitude: 0,
            longitude: 0,
            googlePlaceId: `empty-${Date.now()}`
        };
        }

        renderDay();
    });

      wrapper.appendChild(span);
      wrapper.appendChild(deleteBtn);
    }

    activitiesContainer.appendChild(wrapper);
  });
}

function createAddButton(onClick) {
  const btn = document.createElement("button");
  btn.textContent = "+";
  Object.assign(btn.style, {
    backgroundColor: "#1e88e5",
    color: "white",
    border: "none",
    borderRadius: "6px",
    padding: "0.3rem 0.6rem",         
    fontSize: "1rem",
    cursor: "pointer",
    height: "32px",                 
    lineHeight: "1",
    margin: "0",                     
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  });
  btn.onclick = onClick;
  return btn;
}


function createDeleteButton(onClick) {
  const btn = document.createElement("button");
  btn.textContent = "✕";
  Object.assign(btn.style, {
    marginLeft: "auto",
    background: "none",
    border: "none",
    cursor: "pointer",
    color: "#999999",         
    fontSize: "1.2rem",
    padding: "0 0.5rem",
    transition: "color 0.2s ease"
  });

  btn.onmouseenter = () => btn.style.color = "#666666";
  btn.onmouseleave = () => btn.style.color = "#999999";

  btn.onclick = onClick;
  return btn;
}


function createActivitySpan(activity) {
  const span = document.createElement("span");
  span.textContent = `${activity.name} (${activity.schedule})`;
  span.style.cursor = "pointer";
  span.onclick = () => {
    showActivityInfo(activity);
    updateMap(activity);  // 🗺️ update the map
  };
  return span;
}

function showActivityInfo(activity) {
  const safe = (value) => value && value.trim() !== "" ? value : null;

  const popup = document.createElement("div");

  popup.innerHTML = `
    <div id="popup-overlay" style="
      position: fixed;
      top: 0; left: 0;
      width: 100vw; height: 100vh;
      background: rgba(0, 0, 0, 0.4);
      backdrop-filter: blur(4px);
      z-index: 9998;
    "></div>

    <div id="popup-content" style="
      position: fixed;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      background: #ffffff;
      color: #333;
      padding: 1.5rem;
      border-radius: 16px;
      z-index: 9999;
      width: 360px;
      max-width: 90%;
      font-family: 'Poppins', sans-serif;
      text-shadow: none;
      transition: opacity 0.3s ease, transform 0.3s ease;
      opacity: 0;
      transform: translate(-50%, -48%) scale(0.95);
    ">
      <h2 style="margin-bottom: 0.8rem; font-size: 1.3rem;">${activity.name}</h2>
      ${Array.isArray(activity.allHours) && activity.allHours.length > 0 
        ? `<div><strong>🕒 Weekly Hours:</strong><ul style="padding-left: 1.2rem; margin-top: 0.3rem;">${
            activity.allHours.map(line => `<li style="margin-bottom: 2px;">${line}</li>`).join("")
          }</ul></div>`
        : ""
      }
      ${safe(activity.phoneIntl) ? `<p><strong>📞 Intl:</strong> ${activity.phoneIntl}</p>` : ""}
      ${safe(activity.phoneNational) ? `<p><strong>📞 Local:</strong> ${activity.phoneNational}</p>` : ""}
      ${safe(activity.website) ? `<p><a href="${activity.website}" target="_blank" style="color: #2482c8;">🌐 Website</a></p>` : ""}
      ${safe(activity.externalInfoLink) ? `<p><a href="${activity.externalInfoLink}" target="_blank" style="color: #2482c8;">📖 Wikipedia</a></p>` : ""}
      ${activity.category?.toLowerCase().includes("museum") || activity.category?.toLowerCase().includes("art") || activity.category?.toLowerCase().includes("gallery") ? `<p><strong>🏛️ Type:</strong> Cultural</p>` : ""}
    </div>
  `;

  popup.querySelector("#popup-overlay").addEventListener("click", () => {
    document.body.removeChild(popup);
  });

  document.body.appendChild(popup);

  setTimeout(() => {
    const content = popup.querySelector("#popup-content");
    content.style.opacity = "1";
    content.style.transform = "translate(-50%, -50%) scale(1)";
  }, 10);
}



  function navigateDay(direction) {
    currentDay += direction;
    if (currentDay < 1) currentDay = totalDays;
    if (currentDay > totalDays) currentDay = 1;
    renderDay();
  }

  async function saveItinerary() {
  const userId = localStorage.getItem("user_id");
  const city = localStorage.getItem("itinerary_city");
  const start = localStorage.getItem("itinerary_start");
  const end = localStorage.getItem("itinerary_end");

  const itineraryItems = [];

  itineraryData.dailySuggestions.forEach(day => {
    day.places.forEach(place => {
      const [startTimeStr, endTimeStr] = place.schedule.split(" - ");
      const startTime = `${startTimeStr.trim()}:00`;
      const endTime = `${endTimeStr.trim()}:00`;
      itineraryItems.push({
        googlePlaceId: place.googlePlaceId,
        placeName: place.name,
        placeCategory: place.category,
        dayNumber: day.dayNumber,
        startTime: startTime,
        endTime: endTime,
        duration: 120
      });
    });
  });

  const people = JSON.parse(localStorage.getItem("itinerary_people") || "[]");

  const body = {
    userId: parseInt(userId),
    destination: city,
    startDate: start,
    endDate: end,
    itineraryItems: itineraryItems,
    friendEmails: people 
  };

console.log("Saving trip with payload:", JSON.stringify(body, null, 2));

  const response = await fetch("http://localhost:5192/api/trip/save", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  });

  if (!response.ok) {
  const errorText = await response.text();

  if (response.status === 409) {
    alert("Trip has already been saved.");
  } else {
    alert("Failed to save itinerary.");
  }

  console.error("Failed to save:", errorText);
  return;
}

  if (response.ok) {
    alert("Itinerary saved to database!");
  } else {
    alert("Failed to save itinerary.");
    window.itinerarySaved = false; // allow retry
    document.querySelector(".save-itinerary-button").disabled = false;
  }
}

  renderDay();

  const googlePlacesApiKey = "@Html.Raw(Model.GooglePlacesApiKey)";
  function updateMap(activity) {
  const lat = activity.latitude;
  const lng = activity.longitude;
  const name = encodeURIComponent(activity.name);

  if (lat && lng) {
    const mapUrl = `https://www.google.com/maps/embed/v1/search?key=${googlePlacesApiKey}&q=${name}&center=${lat},${lng}&zoom=16`;
    document.getElementById("dynamicMap").src = mapUrl;
  } else {
    console.warn("No lat/lng for activity");
  }
}


// Set map on page load
const firstPlace = itineraryData?.dailySuggestions?.[0]?.places?.[0];
if (firstPlace) {
  updateMap(firstPlace);
}



window.onload = function () {
  const city = localStorage.getItem("itinerary_city");
  const start = localStorage.getItem("itinerary_start");
  const end = localStorage.getItem("itinerary_end");
  const travelerType = localStorage.getItem("traveler_type");
  const people = JSON.parse(localStorage.getItem("itinerary_people") || "[]");

  console.log("City:", city);
  console.log("Start Date:", start);
  console.log("End Date:", end);
  console.log("Traveler Type:", travelerType);
  console.log("People Emails:", people);


  console.log("Activities and their Google Place IDs:");
  itineraryData.dailySuggestions.forEach(day => {
    console.log(`Day ${day.dayNumber}:`);
    day.places.forEach(p => {
      console.log(`  - ${p.name} → ${p.googlePlaceId}`);
    });
  });


  console.log("== DEBUG itineraryData ==");
itineraryData.dailySuggestions.forEach(day => {
  console.log(`Day ${day.dayNumber}`);
  day.places.forEach(p => {
    console.log(`• ${p.name} (ID: ${p.googlePlaceId})`);
    console.log(`   - Intl: ${p.internationalPhoneNumber}`);
    console.log(`   - Local: ${p.formattedPhoneNumber}`);
    console.log(`   - Website: ${p.website}`);
    console.log(`   - Hours: ${p.openingHours?.join("; ")}`);
    console.log(`   - Wikipedia: ${p.externalInfoLink}`);
    console.log("RAW DATA:", itineraryData.dailySuggestions);
  });
});


};


</script>

</body>
</html>
