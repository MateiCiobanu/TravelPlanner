@page
@model TravelPlanner.WebUI.Pages.IndexModel
@{
    ViewData["Title"] = "Homepage Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Travel Planner Home</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html, body {
      height: 100%;
      font-family: 'Poppins', sans-serif;
    }

    body {
      display: flex;
      flex-direction: column;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      color: white;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
      position: relative;
    }

    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    main {
      padding: 2rem;
      z-index: 5;
      position: relative;
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      position: relative;
      z-index: 6;
    }

    .logo {
      font-size: 3rem;
      font-weight: 700;
    }

    .user-icon {
      width: 40px;
      height: 40px;
      cursor: pointer;
      border-radius: 50%;
      transition: transform 0.2s ease;
    }

    .user-icon:hover {
      transform: scale(1.1);
    }

    .camera-icon {
      width: 40px;
      height: 40px;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .camera-icon:hover {
      transform: scale(1.1);
    }

    .search-bar {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      background-color: rgba(255, 255, 255, 0.05);
      padding: 1rem;
      border-radius: 10px;
      backdrop-filter: blur(6px);
      margin-top: -25px;
      position: relative;
      z-index: 6;
    }

    .search-bar input,
    .search-bar button {
      padding: 0.6rem;
      border: none;
      border-radius: 6px;
      font-size: 1rem;
    }

    .search-bar input {
      flex: 1;
      min-width: 120px;
    }

    .create-btn {
      background-color: rgba(255, 255, 255, 0.2);
      color: white;
      cursor: pointer;
      backdrop-filter: blur(4px);
    }

    .create-btn:hover {
      background-color: rgba(255, 255, 255, 0.35);
    }

    .people-wrapper {
      position: relative;
      display: flex;
      flex-direction: column;
      flex: 1;
      min-width: 120px;
    }

    .extra-people-dropdown {
      position: absolute;
      top: calc(100% + 0.4rem);
      left: 0;
      width: 100%;
      background-color: white;
      color: black;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      max-height: 200px;
      overflow-y: auto;
      z-index: 99;
    }

    .extra-people-dropdown input {
      padding: 0.5rem;
      border-radius: 6px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
      font-size: 0.9rem;
    }

    .hidden {
      display: none !important;
    }

    .error-message {
      margin-top: 1rem;
      font-weight: 500;
      text-align: center;
      color: white;
      padding: 0.8rem 1rem;
      border-radius: 10px;
      text-shadow: none;
      position: relative;
      z-index: 6;
    }

    .carousel-title {
      font-size: 1.8rem;
      font-weight: 600;
      margin: 1rem 1rem 0rem;
      color: white;
      text-align: left;
      z-index: 2;
      
    }

    .carousel-container {
      background-color: white;
      border-top-left-radius: 30px;
      border-top-right-radius: 30px;
      padding: 2rem;
      flex-shrink: 0;
      z-index: 1;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 400px;
      margin-bottom: -35px;
      margin-left: -35px;
      margin-right: -35px;
    }

    .carousel-track {
     display: flex;
     transition: transform 0.5s ease-in-out;
     width: 100%;
     max-width: 1200px;
    }

    .carousel-item {
     flex: 0 0 33.3333%; 
     padding: 0.5rem;
     text-align: center;
     }

    .carousel-item img {
      width: 80%;
      height: 220px;
      object-fit: cover;
      border-radius: 12px;
    }

    .city-name {
      margin-top: 0.5rem;
      font-size: 1rem;
      font-weight: 500;
      color: #333;
      text-shadow: none;
    }

    .carousel-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      font-size: 2.8rem;
      color: #666;
      cursor: pointer;
      z-index: 5;
    }

    .carousel-button.left {
      left: 1rem;
    }

    .carousel-button.right {
      right: 1rem;
    }

    .carousel-button:hover {
      color: #222;
    }
  </style>
</head>
<body>
  <div class="overlay"></div>

  <main>
    <header>
      <div class="logo">Travel Planner</div>
    <div style="display: flex; align-items: center; gap: 1rem;">
      <a href="../TravelWall"><img src="media/camera-icon.png" alt="Camera Icon" class="camera-icon"></a>
      <a href="account.html"><img src="media/user-icon.png" alt="User Account" class="user-icon"></a>
    </div>
    </header>

    <section class="search-bar" id="searchSection">
        <input type="text" id="cityInput" placeholder="City to visit">
        <input type="date" id="startDate">
        <input type="date" id="endDate">
        <select id="travelerType">
            <option value="Culture Explorer">Culture Explorer</option>
            <option value="Chill Seeker">Chill Seeker</option>
            <option value="Foodie Adventurer">Foodie Adventurer</option>
            <option value="Urban Explorer">Urban Explorer</option>
            <option value="Nature Enthusiast">Nature Enthusiast</option>
            <option value="Night Owl">Night Owl</option>
    </select>

      <div class="people-wrapper">
        <input type="number" id="peopleInput" placeholder="People" min="1">
        <div class="extra-people-dropdown hidden" id="extraPeopleDropdown"></div>
      </div>

      <button class="create-btn" onclick="validateInputs()">Create Itinerary</button>
    </section>

    <div id="errorMessage" class="error-message hidden"></div>

    <h2 class="carousel-title">Need some inspiration?</h2>
  </main>

  <section class="carousel-container">
    <button class="carousel-button left" onclick="moveCarousel(-1)">&lsaquo;</button>

    <div class="carousel-track" id="carouselTrack">
      <div class="carousel-item"><img src="media/city1.jpg" alt="City 1"><p class="city-name">Rome</p></div>
      <div class="carousel-item"><img src="media/city2.jpg" alt="City 2"><p class="city-name">Paris</p></div>
      <div class="carousel-item"><img src="media/city3.jpg" alt="City 3"><p class="city-name">Barcelona</p></div>
      <div class="carousel-item"><img src="media/city4.jpg" alt="City 4"><p class="city-name">London</p></div>
      <div class="carousel-item"><img src="media/city5.jpg" alt="City 5"><p class="city-name">Amsterdam</p></div>
      <div class="carousel-item"><img src="media/city6.jpg" alt="City 6"><p class="city-name">Budapest</p></div>
      <div class="carousel-item"><img src="media/city7.jpg" alt="City 7"><p class="city-name">Athens</p></div>
      <div class="carousel-item"><img src="media/city8.jpg" alt="City 8"><p class="city-name">Edinburgh</p></div>
      <div class="carousel-item"><img src="media/city9.jpg" alt="City 9"><p class="city-name">Berlin</p></div>
      <div class="carousel-item"><img src="media/city10.jpg" alt="City 10"><p class="city-name">Lisbon</p></div>
    </div>

    <button class="carousel-button right" onclick="moveCarousel(1)">&rsaquo;</button>
    
  </section>
  
  <script>
    const images = Array.from({ length: 30 }, (_, i) => `media/bg${i + 1}.jpg`);
    const randomImage = images[Math.floor(Math.random() * images.length)];
    const preloadImage = new Image();
    preloadImage.src = randomImage;
    preloadImage.onload = () => {
      document.body.style.backgroundImage = `url('${randomImage}')`;
    };

    let currentSlide = 0;
    const track = document.getElementById('carouselTrack');
    const itemsToShow = 3;

    function moveCarousel(direction) {
        const totalItems = track.children.length;
        const maxSlide = totalItems - itemsToShow;
        currentSlide += direction;
        if (currentSlide < 0) currentSlide = 0;
        if (currentSlide > maxSlide) currentSlide = maxSlide;
        const slideWidth = track.children[0].offsetWidth;
        track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
    }

    const peopleInput = document.getElementById("peopleInput");
    const dropdown = document.getElementById("extraPeopleDropdown");
    let personInputs = [];

    peopleInput.addEventListener("input", () => {
        const count = parseInt(peopleInput.value);
        dropdown.innerHTML = "";
        personInputs = [];

        if (!isNaN(count) && count > 1) {
            dropdown.classList.remove("hidden");
            for (let i = 1; i < count; i++) {
            const input = document.createElement("input");
            input.type = "text";
            input.placeholder = `Email of person ${i + 1}`;
            dropdown.appendChild(input);
            personInputs.push(input);
            }
        } else {
            dropdown.classList.add("hidden");
        }
    });

    document.addEventListener("click", (e) => {
        if (!document.querySelector(".people-wrapper").contains(e.target)) {
            dropdown.classList.add("hidden");
        }
    });

    peopleInput.addEventListener("focus", () => {
        if (personInputs.length > 0) {
            dropdown.classList.remove("hidden");
            personInputs.forEach(input => dropdown.appendChild(input));
        }
    });

    let timeoutId;
    async function validateInputs() {
    const city = document.getElementById("cityInput").value.trim();
    const start = document.getElementById("startDate").value;
    const end = document.getElementById("endDate").value;
    const people = document.getElementById("peopleInput").value;

    const messageBox = document.getElementById("errorMessage");

    if (!city || !start || !end || !people) {
        messageBox.textContent = "Please complete all fields before creating the itinerary.";
        messageBox.classList.remove("hidden");
        return;
    }

    messageBox.classList.add("hidden");

    const type = document.getElementById("travelerType").value;

    const requestBody = {
        destination: city,
        startDate: start,
        endDate: end,
        travelerType: { typeName: type }  
    };

    try {
        const response = await fetch("http://localhost:5192/api/ItinerarySuggestions/suggest", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody)
        });

        if (!response.ok) throw new Error("Failed to generate itinerary.");

        const data = await response.json();

        // Store data in sessionStorage and redirect
        sessionStorage.setItem("itineraryData", JSON.stringify(data));
        window.location.href = "/Itinerary";
    } catch (err) {
        messageBox.textContent = "Error generating itinerary. Please try again.";
        messageBox.classList.remove("hidden");
    }
}
  </script>
   
</body>
</html>
