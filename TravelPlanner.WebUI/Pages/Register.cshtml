@page
@model TravelPlanner.WebUI.Pages.IndexModel
@{
    ViewData["Title"] = "Register Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Register</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      height: 100vh;
      font-family: 'Poppins', sans-serif;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      color: white;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      height: 100vh;
      width: 100vw;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 0;
    }

    .register-container {
      position: relative;
      z-index: 1;
      background-color: transparent;
      padding: 3rem 4rem;
      border-radius: 12px;
      max-width: 800px;
      width: 100%;
    }

    h1 {
      font-size: 3rem;
      margin-bottom: 2rem;
      text-align: center;
    }

    form {
      display: flex;
      flex-wrap: wrap;
      flex-direction: column;
      gap: 2rem;
    }

    .form-columns {
      display: flex;
      flex-wrap: wrap;
      gap: 2rem;
    }

    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }

    .row-group {
      display: flex;
      gap: 1rem;
    }

    input, select {
      padding: 0.8rem 1rem;
      border: none;
      border-radius: 6px;
      background-color: rgba(255, 255, 255, 0.15);
      color: white;
      font-size: 1rem;
      backdrop-filter: blur(4px);
      width: 100%;
    }

    select option {
      background-color: #333;
      color: white;
    }

    input::placeholder, select {
      color: rgba(255, 255, 255, 0.7);
    }

    .tooltip {
      visibility: hidden;
      background-color: rgba(0, 0, 0, 0.8);
      color: #fff;
      text-align: left;
      border-radius: 6px;
      padding: 0.5rem 0.75rem;
      position: absolute;
      z-index: 2;
      font-size: 0.9rem;
      width: 100%;
      bottom: 110%;
      left: 0;
      opacity: 0;
      transition: opacity 0.3s;
    }

    .password-container {
      position: relative;
      width: 100%;
    }

    .password-container:hover .tooltip {
      visibility: visible;
      opacity: 1;
    }

    #message {
      margin: 0 auto;
      font-size: 1rem;
      font-weight: 500;
      color: white;
      text-align: center;
      max-width: 500px;
    }


    .quiz-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 1.5rem;
    }

    .quiz-button {
      padding: 0.8rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      border: none;
      border-radius: 6px;
      background-color: rgba(255, 255, 255, 0.2);
      color: white;
      backdrop-filter: blur(4px);
      cursor: pointer;
      transition: background-color 0.3s ease;
      text-decoration: none;
    }

    .quiz-button:hover {
      background-color: rgba(255, 255, 255, 0.35);
    }

    .quiz-tooltip {
      visibility: hidden;
      background-color: rgba(0, 0, 0, 0.85);
      color: #fff;
      padding: 0.6rem 1rem;
      border-radius: 6px;
      font-size: 0.9rem;
      text-align: center;
      max-width: 260px;
      width: 100%;
      position: absolute;
      bottom: 120%;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .quiz-container:hover .quiz-tooltip {
      visibility: visible;
      opacity: 1;
    }
  </style>
</head>
<body>
  <div class="overlay"></div>
  <div class="register-container">
    <h1>Create Your Account</h1>
    <form id="registerForm">
      <div class="form-columns">
        <div class="column">
          <input type="text" placeholder="First Name" id="firstName" required />
          <input type="text" placeholder="Last Name" id="lastName" required />
          <div class="row-group">
            <input type="number" placeholder="Age" id="age" required min="0" />
            <select id="gender" required>
              <option value="">Gender</option>
              <option>Female</option>
              <option>Male</option>
              <option>Non-binary</option>
              <option>Prefer not to say</option>
            </select>
          </div>
        </div>
        <div class="column">
          <input type="email" placeholder="Email" id="email" required />
          <div class="password-container">
            <input type="password" placeholder="Password" id="password" required />
            <div class="tooltip">
              Password must be at least 8 characters,<br>
              include 1 uppercase letter,<br>
              and 1 special character.
            </div>
          </div>
          <input type="password" placeholder="Confirm Password" id="confirmPassword" required />
        </div>
      </div>

    
      <div id="message"></div>
      <div class="quiz-container">
        <button type="submit" class="quiz-button">Go to the quiz!</button>
        <div class="quiz-tooltip">Want recommendations made just for you? Start the quiz!</div>
      </div>
    </form>
  </div>

  <script>
    const images = Array.from({ length: 30 }, (_, i) => `media/bg${i + 1}.jpg`);
    const randomImage = images[Math.floor(Math.random() * images.length)];
    const preloadImage = new Image();
    preloadImage.src = randomImage;
    preloadImage.onload = () => {
      document.body.style.backgroundImage = `url('${randomImage}')`;
    };

    window.addEventListener('popstate', function () {
      window.location.href = 'index.html';
    });

    const form = document.getElementById("registerForm");
    const message = document.getElementById("message");

  form.addEventListener("submit", async (e) => {
  e.preventDefault();

  window.onload = () => {
  localStorage.removeItem("user_email");
  localStorage.removeItem("user_firstName");
  localStorage.removeItem("user_lastName");
};
  const firstName = document.getElementById("firstName").value.trim();
  const lastName = document.getElementById("lastName").value.trim();
  const age = document.getElementById("age").value.trim();
  const gender = document.getElementById("gender").value;
  const email = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value;
  const confirmPassword = document.getElementById("confirmPassword").value;

  message.textContent = "";
  message.classList.remove("success");

  const hasUpper = /[A-Z]/.test(password);
  const hasSpecial = /[^A-Za-z0-9]/.test(password);
  const isLongEnough = password.length >= 8;

  if (!isLongEnough || !hasUpper || !hasSpecial) {
    message.textContent = "Password must be at least 8 characters, include an uppercase letter and a special character.";
    return;
  }

  if (password !== confirmPassword) {
    message.textContent = "Passwords do not match.";
    return;
  }

          try {
          const response = await fetch("http://localhost:5192/api/user/register", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              name: `${firstName} ${lastName}`,
              email: email,
              password: password
            })
          });

          if (response.ok) {
            message.textContent = "Account created successfully!";
            message.classList.add("success");

            setTimeout(async () => {
              try {
                localStorage.setItem("user_email", email);
                localStorage.setItem("user_firstName", firstName);
                localStorage.setItem("user_lastName", lastName);

                const loginResponse = await fetch("http://localhost:5192/api/user/login", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({
                    email: email,
                    password: password
                  })
                });

                if (loginResponse.ok) {
                  const token = await loginResponse.text();
                  localStorage.setItem("jwt_token", token); 
                  window.location.href = "../Quiz";
                } else {
                  const loginError = await loginResponse.text();
                  message.textContent = "Login failed after registration: " + loginError;
                }
              } catch (loginErr) {
                message.textContent = "Auto-login error: " + loginErr.message;
              }
            }, 500);

          } else {
            const error = await response.text();
            message.textContent = "Registration failed: " + error;
          }
        } catch (error) {
          message.textContent = "An error occurred: " + error.message;
        }
      });
 </script>
 </body>
 </html>

