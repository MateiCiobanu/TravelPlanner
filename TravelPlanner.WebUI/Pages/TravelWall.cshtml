@page
@model TravelPlanner.WebUI.Pages.TravelWallModel
@{
    ViewData["Title"] = "TravelWall Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Travel Planner Home</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <style>
   * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  font-family: 'Poppins', sans-serif;
}

body {
  display: flex;
  flex-direction: column;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  color: white;
  position: relative;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 0;
}

main {
  padding: 2rem;
  z-index: 5;
  position: relative;
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  position: relative;
  z-index: 6;
}

.logo {
  font-size: 3rem;
  font-weight: 700;
}

.user-icon,
.camera-icon {
  width: 40px;
  height: 40px;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.user-icon:hover,
.camera-icon:hover {
  transform: scale(1.1);
}

.wall-title {
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 1rem 0rem;
  color: white;
  text-align: left;
  z-index: 2;
}

.wall-subtitle {
  font-size: 1.2rem;
  font-weight: 300;
  margin-left: 1rem;
  color: white;
  text-align: left;
  z-index: 2;
  line-height: 1.6;
}

.wall-container {
  background-color: white;
  border-top-left-radius: 30px;
  border-top-right-radius: 30px;
  padding: 2rem;
  flex-shrink: 0;
  z-index: 1;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
  min-height: 400px;
  margin-bottom: -35px;
  margin-left: -35px;
  margin-right: -35px;
}

.post {
  background-color: #f9f9f9;
  border-radius: 20px;
  padding: 1rem;
  color: #333;
  width: 100%;
  max-width: 500px;
  text-align: center;
}

.post-header {
  margin-bottom: 1rem;
}

.username {
  font-weight: 600;
  font-size: 1.1rem;
}

.traveler-type {
  font-size: 0.9rem;
  color: #666;
}

.post-date {
  font-size: 0.8rem;
  color: #aaa;
}

.post-location {
  font-size: 0.85rem;
  color: #aaa;
  margin-top: 0.2rem;
}

.post-image {
  width: 100%;
  aspect-ratio: 1 / 1;
  object-fit: cover;
  border-radius: 12px;
  margin-bottom: 0.5rem;
  cursor: pointer;
  transition: transform 0.3s ease;
}

.post-image:hover {
  transform: scale(1.02);
}

.like-button {
  font-size: 1.5rem;
  background: none;
  border: none;
  cursor: pointer;
  transition: color 0.3s ease;
  color: #ccc;
}

.like-button.liked {
  color: #e74c3c;
}

.comments {
  margin-top: 1rem;
  width: 100%;
  text-align: left;
}

.comment {
  font-size: 0.9rem;
  color: #444;
  background-color: #efefef;
  padding: 0.5rem 0.8rem;
  border-radius: 8px;
  margin-bottom: 0.3rem;
}


#imageViewer {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.95);
  justify-content: center;
  align-items: center;
  z-index: 999;
}

#imageViewer img {
  max-width: 90%;
  max-height: 90%;
  border-radius: 12px;
}

    .post-location {
      font-size: 0.85rem;
      color: #aaa;
      margin-top: 0.2rem;
    }

    .comments {
      margin-top: 1rem;
      width: 100%;
      text-align: left;
    }


    .show-more {
      background: none;
      border: none;
      color:rgb(36, 100, 168);
      font-size: 0.9rem;
      cursor: pointer;
      margin-top: 0.3rem;
    }
    .fab {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background-color: #2482c8;
    color: white;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    z-index: 1000;
   }
  .fab:hover {
  background-color: #1d6fab;
  }
   .modal {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  justify-content: center;
  align-items: center;
  z-index: 1001;
}

.modal-content {
  background: white;
  color: black;
  padding: 2rem;
  border-radius: 12px;
  width: 90%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.modal-content input, .modal-content textarea {
  width: 100%;
  padding: 0.6rem;
  border: 1px solid #ccc;
  border-radius: 6px;
}
.modal-content button {
  padding: 0.6rem;
  border: none;
  background-color: #2482c8;
  color: white;
  border-radius: 6px;
  cursor: pointer;
}
.modal-content button:hover {
  background-color: #1d6fab;
}

.comment-input-wrapper {
  display: flex;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.comment-input {
  flex: 1;
  padding: 0.5rem;
  border-radius: 6px;
  border: 1px solid #ccc;
}

.submit-comment-button {
  padding: 0.5rem 1rem;
  background-color: #2482c8;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.submit-comment-button:hover {
  background-color: #1d6fab;
}

.comment {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.9rem;
  color: #444;
  background-color: #efefef;
  padding: 0.5rem 0.8rem;
  border-radius: 8px;
  margin-bottom: 0.3rem;
}

.comment-text {
  flex: 1;
  margin-right: 1rem;
}
.comment.extra-comment {
  display: none;
}

.comment.extra-comment.visible {
  display: flex !important;
}



  </style>
</head>
<body>
  <div class="overlay"></div>

  <main>
    <header>
      <div class="logo">Travel Planner</div>
      <div style="display: flex; align-items: center; gap: 1rem;">
        <a href="../TravelWall"><img src="media/camera-icon.png" alt="Camera Icon" class="camera-icon"></a>
        <a href="account.html"><img src="media/user-icon.png" alt="User Account" class="user-icon"></a>
      </div>
    </header>

    <h2 class="wall-title">Travel Wall</h2>
    <h3 class="wall-subtitle">See moments from fellow travelers. Share your own and inspire others.</h3>
  </main>

  <section class="wall-container">
   <div id="postContainer" class="wall-container"></div>
  </section>
  <button class="fab" onclick="openPostForm()">＋</button>

  <div id="imageViewer" onclick="this.style.display='none'">
    <img id="viewerImg" src="" alt="Full View">
  </div>
  <div id="postForm" class="modal">
  <div class="modal-content">
    <h3>Create a New Post</h3>
    <input type="text" id="titleInput" placeholder="Title">
    <input type="text" id="locationInput" placeholder="Location">
    <input type="file" id="imageInput">
    <button onclick="submitPost()">Submit</button>
    <button onclick="closePostForm()">Cancel</button>
  </div>
</div>

  <script>
   const images = Array.from({ length: 30 }, (_, i) => `media/bg${i + 1}.jpg`);
  const randomImage = images[Math.floor(Math.random() * images.length)];
  const preloadImage = new Image();
  preloadImage.src = randomImage;
  preloadImage.onload = () => {
    document.body.style.backgroundImage = `url('${randomImage}')`;
  };

    function toggleLike(button) {
      button.classList.toggle("liked");
      button.textContent = button.classList.contains("liked") ? "❤️" : "♡";
    }

    function viewImage(src) {
      const viewer = document.getElementById("imageViewer");
      const viewerImg = document.getElementById("viewerImg");
      viewerImg.src = src;
      viewer.style.display = "flex";
    }
          async function isPostLiked(postId, button) {
        const token = localStorage.getItem("jwt_token");
        const userId = localStorage.getItem("user_id");

        try {
          const res = await fetch(`http://localhost:5192/api/Post/isLiked?userId=${userId}&postId=${postId}`, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });

          if (res.ok) {
            const isLiked = await res.json();
            if (isLiked === true) {
              button.classList.add("liked");
              button.textContent = "❤️";
            }
          }
        } catch (err) {
          console.warn("Could not verify like status:", err);
        }
      }


      async function toggleCommentLike(button, commentId) {
      const token = localStorage.getItem("jwt_token");
      const userId = localStorage.getItem("user_id");
      const isLiked = button.classList.contains("liked");

      const likeData = {
        userId: parseInt(userId),
        commentId: parseInt(commentId),
        type: true
      };

      try {
        if (!isLiked) {
          const response = await fetch("http://localhost:5192/api/Comment/like", {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(likeData)
          });

          if (!response.ok) throw new Error("Failed to like comment");
          button.classList.add("liked");
          button.textContent = "❤️";
        } else {
          const response = await fetch("http://localhost:5192/api/Comment/unlike", {
            method: "DELETE",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              userId: parseInt(userId),
              commentId: parseInt(commentId)
            })
          });

          if (!response.ok) throw new Error("Failed to unlike comment");
          button.classList.remove("liked");
          button.textContent = "♡";
        }
      } catch (err) {
        console.error("Comment like toggle failed:", err);
      }
    }
    
      async function isCommentLiked(commentId, button) {
      const token = localStorage.getItem("jwt_token");
      const userId = localStorage.getItem("user_id");

      try {
        const res = await fetch(`http://localhost:5192/api/Comment/isLiked?userId=${userId}&commentId=${commentId}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });

        if (res.ok) {
          const liked = await res.json();
          if (liked === true) {
            button.classList.add("liked");
            button.textContent = "❤️";
          }
        }
      } catch (err) {
        console.warn("Could not check comment like status:", err);
      }
    }

      
    function toggleComments(button) {
      const comments = button.parentElement.querySelectorAll(".extra-comment");
      const isHidden = comments[0].style.display === "none";
      comments.forEach(c => c.style.display = isHidden ? "block" : "none");
      button.textContent = isHidden ? "Show less" : "Show more";
    }
    function openPostForm() {
      document.getElementById('postForm').style.display = 'flex';
    }
    function closePostForm() {
      document.getElementById('postForm').style.display = 'none';
    }
    async function submitComment(button) {
  const wrapper = button.parentElement;
  const input = wrapper.querySelector('.comment-input');
  const commentText = input.value.trim();
  const postWrapper = wrapper.closest('.post');
  const postId = postWrapper.dataset.postId;
  const userId = localStorage.getItem("user_id");
  const token = localStorage.getItem("jwt_token");

  if (!commentText || !postId || !userId || !token) {
    alert("Missing required data or not logged in.");
    return;
  }

  const commentData = {
    content: commentText,
    userId: parseInt(userId),
    postId: parseInt(postId),
    date: new Date().toISOString()
  };

  try {
    const response = await fetch("http://localhost:5192/api/Comment/create", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(commentData)
    });

    if (!response.ok) throw new Error("Failed to post comment.");


    const commentEl = document.createElement("div");
    commentEl.className = "comment";

    const commentTextEl = document.createElement("span");
    commentTextEl.className = "comment-text";
    commentTextEl.textContent = commentText;
    commentEl.appendChild(commentTextEl);

    const likeBtn = document.createElement("button");
    likeBtn.className = "like-button";
    likeBtn.textContent = "♡";
    likeBtn.onclick = () => toggleCommentLike(likeBtn, commentData.commentId); 
    commentEl.appendChild(likeBtn);

  
    const commentsSection = postWrapper.querySelector('.comments');
    commentsSection.insertBefore(commentEl, commentsSection.querySelector(".show-more")); 


    input.value = '';

  } catch (error) {
    alert("Error posting comment: " + error.message);
  }
}

        async function loadComments(postId, container) {
      const token = localStorage.getItem("jwt_token");

      try {
        const res = await fetch(`http://localhost:5192/api/comment?postId=${postId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (!res.ok) throw new Error("Failed to load comments");

        const comments = await res.json();

        comments.forEach((comment, index) => {
          const commentEl = document.createElement('div');
          commentEl.className = 'comment';
          commentEl.innerHTML = `
            <span class="comment-text">${comment.content}</span>
          `;

          if (index >= 2) {
            commentEl.classList.add("extra-comment");
            commentEl.style.display = "none";
          }

          const commentLikeBtn = document.createElement("button");
          commentLikeBtn.className = "like-button";
          commentLikeBtn.textContent = "♡";
          commentLikeBtn.onclick = () => toggleCommentLike(commentLikeBtn, comment.id);
          commentEl.appendChild(commentLikeBtn);
          isCommentLiked(comment.id, commentLikeBtn);

          container.appendChild(commentEl);
        });

        if (comments.length > 2) {
          const showMoreBtn = document.createElement("button");
          showMoreBtn.className = "show-more";
          showMoreBtn.textContent = "Show more";
          showMoreBtn.onclick = () => {
            const extraComments = container.querySelectorAll(".extra-comment");
            const isHidden = !extraComments[0].classList.contains("visible");

            extraComments.forEach(c => {
              if (isHidden) {
                c.classList.add("visible");
              } else {
                c.classList.remove("visible");
              }
            });

            showMoreBtn.textContent = isHidden ? "Show less" : "Show more";
          };
          container.appendChild(showMoreBtn);
        }

      } catch (err) {
        console.error("Error loading comments for post", postId, err);
      }
    }



    function displayPosts(posts) {
      const container = document.getElementById("postContainer");
      container.innerHTML = "";
      const token = localStorage.getItem("jwt_token");
      posts.sort((a, b) => new Date(b.date) - new Date(a.date));
      posts.forEach(post => {
        console.log(post);
        const wrapper = document.createElement("div");
        wrapper.className = "post";
        wrapper.dataset.postId = post.id;
        wrapper.innerHTML = `
          <div class="post-header">
            <div class="username" id="user-${post.userId}-${post.id}">Loading...</div>
            <div class="post-date">${new Date(post.date).toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' })}</div>
            <div class="post-location">📍 ${post.googlePlaceId}</div>
          </div>
          <img src="http://localhost:5192${post.imagePath}" alt="Post Image" class="post-image" onclick="viewImage('http://localhost:5192${post.imagePath}')">
          <h3 style="margin: 0.5rem 0;">${post.title}</h3>
          <div class="comments"></div>
          <div class="comment-input-wrapper">
            <input type="text" class="comment-input" placeholder="Write a comment..." />
            <button class="submit-comment-button" onclick="submitComment(this)">Post</button>
          </div>
        `;

        container.appendChild(wrapper);
        if (post.userId) {
       fetch(`http://localhost:5192/api/user/${post.userId}`, {
            headers: { Authorization: `Bearer ${token}` }
          })
          .then(res => res.json())
          .then(data => {
            document.getElementById(`user-${post.userId}-${post.id}`).textContent = data.email;
          })
          .catch(() => {
            document.getElementById(`user-${post.userId}-${post.id}`).textContent = "Unknown";
          });
      }

       const commentsSection = wrapper.querySelector(".comments");
       loadComments(post.id, commentsSection);
    });
      
    }

    async function fetchPosts() {
        try {
          const token = localStorage.getItem("jwt_token");

          const response = await fetch("http://localhost:5192/api/Post", {
            headers: {
              "Authorization": `Bearer ${token}`
            }
          });

          if (!response.ok) {
            throw new Error("Failed to fetch posts");
          }

          const posts = await response.json();
          displayPosts(posts);
        } catch (err) {
          console.error("Error loading posts:", err);
        }
        
      }


      async function submitPost() {
      const location = document.getElementById('locationInput').value.trim();
      const title = document.getElementById('titleInput').value.trim();
      const imageInput = document.getElementById('imageInput');
      const imageFile = imageInput.files[0];

      const token = localStorage.getItem("jwt_token");
      const userId = localStorage.getItem("user_id"); 

      if (!token) {
        alert("You must be logged in to create a post.");
        return;
      }

      if (!location || !imageFile || !title || !userId) {
        alert('All fields are required.');
        return;
      }

      const formData = new FormData();
      formData.append("GooglePlaceId", location);
      formData.append("Title", title);
      formData.append("UserId", userId);  
      formData.append("Date", new Date().toISOString());
      formData.append("Image", imageFile);

      try {
        const response = await fetch("http://localhost:5192/api/post/create", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`
          },
          body: formData
        });

        if (response.ok) {
          alert("Post created successfully!");
          closePostForm();
          window.location.reload();
        } else {
          const error = await response.text();
          alert("Failed to create post: " + error);
        }
      } catch (err) {
        alert("Error: " + err.message);
      }
    }

    window.onload = () => {
      fetchPosts();
    };
  </script>
</body>
</html>