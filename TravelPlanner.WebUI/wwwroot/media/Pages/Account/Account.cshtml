@page
@{
    ViewData["Title"] = "Account";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>My Profile</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)),
                  url("~/media/city11.jpeg") no-repeat center center fixed;
      background-size: cover;
      color: white;
    }

    .sidebar {
      width: 280px;
      background-color: rgba(255, 255, 255, 0.08);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      color: white;
      height: 100vh;
      position: fixed;
      padding: 2rem 1rem 1.5rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-shadow: 3px 0 15px rgba(0,0,0,0.3);
      border-radius: 0 16px 16px 0;
    }

    .profile-box {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 2rem;
    }

    .avatar {
      width: 100px;
      height: 100px;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      font-size: 2.7rem;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1rem;
    }

    #name {
      font-size: 1.3rem;
      font-weight: 700;
      margin: 0;
    }

    #username {
      font-size: 0.9rem;
      color: #dddddd;
      margin: 0.4rem 0 1.2rem;
    }

    .stats {
      display: flex;
      justify-content: space-around;
      width: 100%;
      margin-top: 0.5rem;
    }

    .stat {
      text-align: center;
    }

    .stat span {
      display: block;
      font-weight: 700;
      font-size: 1.2rem;
    }

    .stat small {
      font-size: 0.8rem;
      color: #aaaaaa;
    }

    .settings {
      margin-top: auto;
      width: 100%;
      position: relative;
    }

    .settings-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-left: -1rem;
      margin-bottom: 1rem;
      width: 100%;
      padding: 1rem 1rem;
      font-size: 1rem;
      font-weight: 500;
      color: #ffffff;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .settings-toggle:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .settings-toggle::before {
      content: '\2699';
      margin-right: 0.6rem;
      font-size: 1.2rem;
    }

    .settings-list {
      display: none;
      flex-direction: column;
      background-color: rgba(255, 255, 255, 0.2);
      color: #333;
      border-radius: 8px;
      margin: 0.8rem 0;
      overflow: hidden;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      list-style-type: none;
      padding: 0;
    }

    .settings-list.active {
      display: flex;
    }

    .settings-list li {
      padding: 0.8rem 1.2rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: background 0.2s;
      color: white;
      background-color: rgba(0, 0, 0, 0.3);
    }

    .settings-list li:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    .main {
      margin-left: 300px;
      padding: 3rem 2rem;
      position: relative;
    }

    .top-right {
      position: absolute;
      top: 20px;
      right: 30px;
    }

    .home-icon {
      font-size: 30px;
      color: white;
      cursor: pointer;
      transition: transform 0.2s ease, color 0.3s ease;
    }

    .home-icon:hover {
      transform: scale(1.1);
      color: #90caf9;
    }

    .card {
      background-color: rgba(255, 255, 255, 0.12);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-radius: 16px;
      padding: 2rem 2.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    h3 {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
      color: #ffffff;
    }

    p {
      font-size: 1rem;
      margin: 0.6rem 0;
    }

    .requiz-btn, .mytrips-btn {
      margin-top: 1.5rem;
      padding: 1rem 1.8rem;
      font-size: 1rem;
      background: linear-gradient(135deg, #4fc3f7, #0288d1);
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
      margin-right: 1rem;
    }

    .requiz-btn:hover, .mytrips-btn:hover {
      background: linear-gradient(135deg, #0288d1, #01579b);
      transform: scale(1.05);
    }

    .info-box {
      width: 100%;
      margin-top: 2rem;
      padding: 1rem;
      border-radius: 10px;
      color: white;
    }

    .info-item {
      display: flex;
      justify-content: space-between;
      padding: 0.7rem;
      border-radius: 8px;
      margin-bottom: 0.7rem;
      align-items: center;
      cursor: pointer;
    }

    .info-item .info-title {
      font-size: 1.2rem;
      font-weight: 200;
    }

    .info-item .info-count {
      font-size: 1rem;
      font-weight: 200;
      color: #fdfdfd;
    }

    .trips,
    .countries {
      background-color: rgba(255, 255, 255, 0);
    }

    .info-item:hover {
      background-color: rgba(255, 255, 255, 0.08);
    }

    .info-item span.material-icons {
      font-size: 2rem;
    }

    .modal-overlay {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .modal-content {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      padding: 2rem;
      border-radius: 20px;
      width: 400px;
      max-width: 90%;
      box-shadow: 0 10px 40px rgba(0,0,0,0.3);
      position: relative;
      text-align: center;
      color: white;
    }

    .modal-content h2 {
      margin-bottom: 1.5rem;
      font-weight: 600;
      color: #fff;
    }

    .modal-content input {
      width: 100%;
      padding: 0.9rem 1rem;
      margin: 0.6rem 0;
      border-radius: 12px;
      border: 1px solid rgba(255,255,255,0.2);
      background: rgba(255, 255, 255, 0.2);
      color: white;
      font-size: 1rem;
      box-sizing: border-box;
    }

    .modal-content input::placeholder {
      color: rgba(255, 255, 255, 0.7);
    }

    .modal-content .update-btn {
      margin-top: 1.5rem;
      background: linear-gradient(135deg, #1a73e8, #0056b3);
      color: white;
      border: none;
      padding: 0.9rem 1.8rem;
      border-radius: 25px;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .modal-content .update-btn:hover {
      background: linear-gradient(135deg, #155cb0, #004599);
      transform: scale(1.05);
    }

    .close-btn {
      position: absolute;
      top: 16px;
      right: 20px;
      font-size: 1.5rem;
      color: white;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <div class="profile-box">
      <div class="avatar" id="initial">U</div>
      <h2 id="name">User Name</h2>
      <p id="username">&#64;<span id="usernameText">user</span></p>
    </div>

    <div class="info-box">
      <div class="info-item trips" id="tripsRedirect">
        <span class="material-icons">location_on</span>
        <span class="info-title">Trips</span>
        <span class="info-count" id="tripsCount">0</span>
      </div>
      <div class="info-item countries">
        <span class="material-icons">public</span>
        <span class="info-title">Countries</span>
        <span class="info-count" id="countriesCount">0</span>
      </div>
    </div>

    <div class="settings">
      <div class="settings-toggle" onclick="toggleSettings()">Settings</div>
      <ul id="settingsMenu" class="settings-list">
        <li onclick="showProfileModal()">Profile settings</li>
        <li onclick="showPasswordModal()">Change password</li>
        <li onclick="logout()">Log out</li>
      </ul>
    </div>
  </div>

  <div class="main">
    <!-- Home icon top-right -->
    <div class="top-right">
      <a href="../Homepage" title="Go to Homepage">
        <span class="material-icons home-icon">home</span>
      </a>
    </div>

    <div class="card">
      <h3>User Information</h3>
      <p><strong>Full Name:</strong> <span id="fullname">User Name</span></p>
      <p><strong>Age:</strong> <span id="age">25</span></p>
      <p><strong>Gender:</strong> <span id="gender">Not specified</span></p>
      <p><strong>Email:</strong> <span id="emailinfo">user@example.com</span></p>
    </div>

    <div class="card">
      <h3>Traveler Type</h3>
      <p><strong>Your Type:</strong> <span id="travelerType">Explorer</span></p>
      <p id="typeDescription">Your personalized travel style based on your preferences.</p>
      <button class="requiz-btn" onclick="retakeQuiz()">Retake Quiz</button>
      <button class="mytrips-btn" onclick="goToMyTrips()">My Trips</button>
    </div>
  </div>

  <!-- Modals -->
  <div id="profileSettingsModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" onclick="closeModal('profileSettingsModal')">Ã—</span>
      <h2>Profile Settings</h2>
      <input type="text" id="updateFullName" placeholder="Full Name">
      <input type="number" id="updateAge" placeholder="Age">
      <input type="text" id="updateGender" placeholder="Gender">
      <input type="email" id="updateEmail" placeholder="Email">
      <button class="update-btn" onclick="updateProfile()">Update Profile</button>
    </div>
  </div>

  <div id="changePasswordModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" onclick="closePasswordModal()">Ã—</span>
      <h2>Change Password</h2>
      <input type="password" id="currentPassword" placeholder="Current Password" />
      <input type="password" id="newPassword" placeholder="New Password" />
      <input type="password" id="confirmPassword" placeholder="Confirm Password" />
      <button class="update-btn" onclick="updatePassword()">Update Password</button>
    </div>
  </div>

  <script>
    // JWT token'dan kullanÄ±cÄ± bilgilerini getir
    async function getUserFromToken() {
      const token = localStorage.getItem("jwt_token");
      if (!token) {
        console.log("No token found, using test data");
        initializeUserData();
        return;
      }

      try {
        // JWT payload'Ä±nÄ± decode et
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const payload = JSON.parse(atob(base64));
        const userId = payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"] || payload.nameid || payload.sub;
        
        console.log("Full JWT payload:", payload);
        console.log("User ID from token:", userId);

        // API'den kullanÄ±cÄ± bilgilerini getir
        const response = await fetch(`http://localhost:5192/api/user/${userId}`, {
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const user = await response.json();
          console.log("User data from API:", user);
          
          // API'den gelen veriyi localStorage'a kaydet
          const [firstName, ...lastNameParts] = user.name.split(' ');
          const lastName = lastNameParts.join(' ');
          
          localStorage.setItem("user_firstName", firstName);
          localStorage.setItem("user_lastName", lastName || "");
          localStorage.setItem("user_email", user.email);
          localStorage.setItem("user_traveler_type", user.travelerType || "Explorer");
          
          console.log("User data saved to localStorage");
        } else {
          console.log("API call failed, status:", response.status);
          console.log("Response text:", await response.text());
          initializeUserData();
        }
      } catch (error) {
        console.error("Error decoding token or fetching user:", error);
        initializeUserData();
      }
    }

    // Sayfa yÃ¼klendiÄŸinde test verisi ekle (fallback)
    function initializeUserData() {
      // EÄŸer localStorage boÅŸsa test verisi ekle
      if (!localStorage.getItem("user_firstName")) {
        localStorage.setItem("user_firstName", "John");
        localStorage.setItem("user_lastName", "Doe");
        localStorage.setItem("user_age", "28");
        localStorage.setItem("user_gender", "Male");
        localStorage.setItem("user_email", "john.doe@email.com");
        console.log("Test data initialized");
      }
    }

    // KullanÄ±cÄ± verilerini yÃ¼kle
    async function loadUserData() {
      // Ã–nce gerÃ§ek kullanÄ±cÄ± verilerini getirmeyi dene
      await getUserFromToken();
      
      const fname = localStorage.getItem("user_firstName") || "User";
      const lname = localStorage.getItem("user_lastName") || "Name";
      const age = localStorage.getItem("user_age") || "25";
      const gender = localStorage.getItem("user_gender") || "Not specified";
      const email = localStorage.getItem("user_email") || "user@example.com";

      console.log("Loading user data:", fname, lname, age, gender, email);

      // SayfayÄ± gÃ¼ncelle
      document.getElementById("name").textContent = fname + " " + lname;
      document.getElementById("initial").textContent = fname.charAt(0).toUpperCase();
      document.getElementById("fullname").textContent = fname + " " + lname;
      document.getElementById("age").textContent = age;
      document.getElementById("gender").textContent = gender;
      document.getElementById("emailinfo").textContent = email;
      document.getElementById("usernameText").textContent = fname.toLowerCase();
    }

    // Sayfa yÃ¼klendiÄŸinde Ã§alÄ±ÅŸtÄ±r
    document.addEventListener('DOMContentLoaded', function() {
      loadUserData();
      displayTravelerType();
      loadTripCount();
    });

    function toggleSettings() {
      document.getElementById("settingsMenu").classList.toggle("active");
    }

    function goToMyTrips() {
      window.location.href = "../MyTrips";
    }

    document.getElementById("tripsRedirect").addEventListener("click", function() {
      goToMyTrips();
    });

    function logout() {
      localStorage.clear();
      window.location.href = '../';
    }

    function retakeQuiz() {
      for (let i = 1; i <= 10; i++) {
        localStorage.removeItem(`quiz_${i}`);
      }
      window.location.href = '../Quiz';
    }

    function displayTravelerType() {
      const travelerType = localStorage.getItem('user_traveler_type') || 'Explorer';
      document.getElementById("travelerType").textContent = travelerType;
      document.getElementById("typeDescription").textContent = "Your personalized travel style based on your preferences.";
    }

    function showPasswordModal() {
      document.getElementById('currentPassword').value = '';
      document.getElementById('newPassword').value = '';
      document.getElementById('confirmPassword').value = '';
      document.getElementById("changePasswordModal").style.display = "flex";
    }

    function closePasswordModal() {
      document.getElementById("changePasswordModal").style.display = "none";
    }

    function showProfileModal() {
      const currentFullName = (localStorage.getItem("user_firstName") || "") + " " + (localStorage.getItem("user_lastName") || "");
      document.getElementById('updateFullName').value = currentFullName.trim();
      document.getElementById('updateAge').value = localStorage.getItem("user_age") || "";
      document.getElementById('updateGender').value = localStorage.getItem("user_gender") || "";
      document.getElementById('updateEmail').value = localStorage.getItem("user_email") || "";
      
      document.getElementById("profileSettingsModal").style.display = "flex";
    }

    function closeModal(id) {
      document.getElementById(id).style.display = "none";
    }

    async function updateProfile() {
      const fullName = document.getElementById('updateFullName').value.trim();
      const newAge = document.getElementById('updateAge').value.trim();
      const newGender = document.getElementById('updateGender').value.trim();
      const newEmail = document.getElementById('updateEmail').value.trim();

      if (!fullName || !newAge || !newGender || !newEmail) {
        alert("Please fill in all fields.");
        return;
      }

      const [firstName, ...lastNameArr] = fullName.split(' ');
      const lastName = lastNameArr.join(' ') || '';

      try {
        // API'ye gÃ¼ncelleme isteÄŸi gÃ¶nder
        const token = localStorage.getItem("jwt_token");
        const response = await fetch("http://localhost:5192/api/user/update-profile", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify({
            email: newEmail,
            name: fullName,
            travelerType: localStorage.getItem("user_traveler_type") || "Explorer"
          })
        });

        if (response.ok) {
          // localStorage'Ä± gÃ¼ncelle
          localStorage.setItem('user_firstName', firstName);
          localStorage.setItem('user_lastName', lastName);
          localStorage.setItem('user_age', newAge);
          localStorage.setItem('user_gender', newGender);
          localStorage.setItem('user_email', newEmail);

          // SayfayÄ± gÃ¼ncelle
          await loadUserData();

          // Formu temizle
          document.getElementById('updateFullName').value = '';
          document.getElementById('updateAge').value = '';
          document.getElementById('updateGender').value = '';
          document.getElementById('updateEmail').value = '';

          closeModal('profileSettingsModal');
          alert("Profile updated successfully!");
        } else {
          const errorText = await response.text();
          alert("Failed to update profile: " + errorText);
        }
      } catch (error) {
        console.error("Error updating profile:", error);
        alert("Error updating profile. Please try again.");
      }
    }

    async function updatePassword() {
      const current = document.getElementById('currentPassword').value;
      const newPass = document.getElementById('newPassword').value;
      const confirm = document.getElementById('confirmPassword').value;

      if (!current || !newPass || !confirm) {
        alert("Please fill in all fields.");
        return;
      }

      if (newPass !== confirm) {
        alert("New passwords do not match.");
        return;
      }

      if (newPass.length < 8) {
        alert("Password must be at least 8 characters long.");
        return;
      }

      try {
        const token = localStorage.getItem("jwt_token");
        const email = localStorage.getItem("user_email");
        
        // Ã–nce mevcut ÅŸifreyi doÄŸrula (login endpoint'i kullanarak)
        const loginResponse = await fetch("http://localhost:5192/api/user/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: email, password: current })
        });

        if (!loginResponse.ok) {
          alert("Current password is incorrect.");
          return;
        }

        // Åžifre gÃ¼ncelleme API Ã§aÄŸrÄ±sÄ±
        const changePasswordResponse = await fetch("http://localhost:5192/api/user/change-password", {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            email: email,
            currentPassword: current,
            newPassword: newPass
          })
        });

        if (changePasswordResponse.ok) {
          document.getElementById('currentPassword').value = '';
          document.getElementById('newPassword').value = '';
          document.getElementById('confirmPassword').value = '';
          
          closePasswordModal();
          alert("Password updated successfully!");
        } else {
          const errorText = await changePasswordResponse.text();
          alert("Failed to update password: " + errorText);
        }
        
      } catch (error) {
        console.error("Error updating password:", error);
        alert("Error updating password. Please try again.");
      }
    }

    async function loadTripCount() {
      try {
        document.getElementById('tripsCount').textContent = '2';
        document.getElementById('countriesCount').textContent = '3';
      } catch (error) {
        console.error('Error loading trip count:', error);
      }
    }
  </script>
</body>
</html>